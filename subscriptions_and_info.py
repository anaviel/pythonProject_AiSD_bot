from sqlalchemy import create_engine, func
from dotenv import load_dotenv, find_dotenv
import os
from database_editing import Classes, SubscriptionInfo, ProbClasses, Session
from telebot import types
from bot_start import bot
from registr_cancel_class import sign_up_for_training
from tabulate import tabulate
import matplotlib.pyplot as plt
from io import BytesIO

load_dotenv(find_dotenv())

engine = create_engine('sqlite:///rasp.db', echo=False)

# –¢–æ–∫–µ–Ω –¥–ª—è –ÆKassa
payment_token = os.getenv('PAYMENT_TOKEN')


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
def personal_account(message):
    session = Session()
    user_id = message.from_user.id

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLAlchemy –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    name = session.query(SubscriptionInfo.visitor).filter_by(id=user_id).scalar()
    result = session.query(SubscriptionInfo.subscription).filter_by(visitor=name).scalar()
    dates_napr = session.query(Classes.date, Classes.napr).filter_by(id=user_id, visitor=name).all()

    classes = ''
    for date, napr in dates_napr:
        classes += f'\n    {date}  {napr}\n'

    image_file = os.listdir("images")
    if image_file:
        image_path = os.path.join("images", image_file[0])
        with open(image_path, 'rb') as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption=f'ü§ç–£–≤–∞–∂–∞–µ–º–∞—è, {name}!\n\n    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: '
                        f'{result}\n\nüéÄ–ó–∞–Ω—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã:\n{classes}'
            )

    session.close()


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å"
def help_(message):
    bot.send_message(message.chat.id, '''–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–Ω–æ–ø–∫–∞–º–∏:
            \n\nü§ç¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ªü§ç 
        –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É, –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏, –ø–æ—Å–ª–µ —á–µ–≥–æ –í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∂–µ–ª–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. 
        –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ, –ø—Ä–∏ —ç—Ç–æ–º —Å–æ —Å—á—ë—Ç–∞ –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ. 
            \n\nü§ç¬´–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ¬ªü§ç 
        –î–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏. –í—ã —É–≤–∏–¥–∏—Ç–µ –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã, –∏ —Å–º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –ª—é–±–æ–µ –∏–∑ –Ω–∏—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏. 
        –ü—Ä–∏ —ç—Ç–æ–º –Ω–∞ —Å—á—ë—Ç –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ.
            \n\nü§ç¬´–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç¬ªü§ç 
        –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å, –∞ —Ç–∞–∫–∂–µ –±–∞–ª–∞–Ω—Å –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.
            ''')


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∞–¥–º–∏–Ω–æ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"
def update_price_list(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    file_name = f"images/{file_info.file_id}.jpg"
    if os.listdir("images"):
        os.remove(os.path.join("images", os.listdir("images")[0]))
    downloaded_file = bot.download_file(file_info.file_path)
    with open(file_name, 'wb') as new_file:
        new_file.write(downloaded_file)
    bot.send_message(message.chat.id, "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∞–¥–º–∏–Ω–æ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã"
def subscription(message):
    session = Session()
    active_subscriptions = session.query(SubscriptionInfo.visitor).filter(SubscriptionInfo.subscription > 0).all()
    kol = len(active_subscriptions)
    markup_subscription = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç', callback_data='replenish_subscription')
    markup_subscription.add(button1)
    bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {kol}', reply_markup=markup_subscription)

    session.close()


@bot.callback_query_handler(func=lambda callback: 'replenish_subscription' in callback.data)
def callback_replenish_subscription(callback):
    bot.send_message(callback.message.chat.id,
                     '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –§–ò–û –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è, –ø–æ–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                     '–ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n'
                     '–ü—Ä–∏–º–µ—Ä: <b><i>+79213421431, –ò–≤–∞–Ω–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞, 30</i></b>',
                     parse_mode='HTML')
    bot.register_next_step_handler(callback.message, replenish_subscription, callback)


def replenish_subscription(message, callback):
    session = Session()

    try:
        phone_number, visitor, kol = message.text.split(', ')
        subscription_info = session.query(SubscriptionInfo).filter_by(phone_number=phone_number,
                                                                      visitor=visitor).first()

        if subscription_info is None:
            bot.send_message(message.chat.id, "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            user_id = subscription_info.id
            bot.send_message(user_id, f"–£–≤–∞–∂–∞–µ–º–∞—è, {visitor}! –í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                                      f"–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –±—ã–ª –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω –≤–ø–µ—Ä–≤—ã–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç.")
            new_subscription = subscription_info.subscription + int(kol)
            subscription_info.subscription = new_subscription
            session.commit()
            bot.send_message(message.chat.id, "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω.")

    except Exception as e:
        bot.send_message(message.chat.id, f"–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –û—à–∏–±–∫–∞: {e}")
        callback_replenish_subscription(callback)

    finally:
        session.close()


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ"
def trial_training(message):
    bot.send_message(message.chat.id, '–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ. '
                                      '\n\n–°—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —É –í–∞—Å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ.'
                                      '\n\nü§ç–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å—Ç—É–¥–∏–∏.')
    bot.send_invoice(message.chat.id, '–ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ', '–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è', 'invoice', payment_token, 'RUB',
                     [types.LabeledPrice('–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è', 400 * 100)])


@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@bot.message_handler(content_types=['successful_payment'])
def successful_payment(message):
    session = Session()

    new_user_id = message.chat.id
    subscription_info = session.query(SubscriptionInfo).filter_by(id=new_user_id).first()
    subscription_info.prob_inf = '+'
    subscription_info.subscription = 1
    session.commit()
    bot.send_message(new_user_id, '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ñ–¥—ë–º –≤–∞—Å –Ω–∞ –ø—Ä–æ–±–Ω–æ–º –∑–∞–Ω—è—Ç–∏–∏ –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏!')
    from database_editing import prob_classes
    prob_classes(new_user_id)
    sign_up_for_training(message)

    session.close()


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∞–¥–º–∏–Ω–æ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–¢–∞–±–ª–∏—Ü—ã"
def display_tables(message):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='show_the_rasp')
    button2 = types.InlineKeyboardButton('–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã', callback_data='show_the_ab')
    button3 = types.InlineKeyboardButton('–ü—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è', callback_data='show_the_prob')
    markup.add(button1, button2, button3)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É:", reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: 'show_the_rasp' in callback.data)
def callback_show_the_rasp(callback):
    session = Session()
    classes_data = session.query(Classes.date, Classes.napr, Classes.coach, Classes.visitor).all()

    if classes_data:
        headers = ["–î–∞—Ç–∞", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–¢—Ä–µ–Ω–µ—Ä", "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å"]
        data = [list(row) for row in classes_data]
        table_rasp = tabulate(data, headers, tablefmt="pretty")

        with open("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ.txt", "w", encoding="utf-8") as file:
            file.write(table_rasp)

        with open("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ.txt", "rb") as file:
            bot.send_document(callback.message.chat.id, file)

    session.close()


@bot.callback_query_handler(func=lambda callback: 'show_the_ab' in callback.data)
def callback_show_the_ab(callback):
    session = Session()

    subscriptions_data = session.query(Classes.date, Classes.napr, Classes.coach, Classes.visitor).all()

    if subscriptions_data:
        headers_subscriptions = ["ID", "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ê–±–æ–Ω–µ–º–µ–Ω—Ç"]
        data_subscriptions = [list(row) for row in subscriptions_data]
        table_subscriptions = tabulate(data_subscriptions, headers_subscriptions, tablefmt="pretty")

        with open("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã.txt", "w", encoding="utf-8") as file:
            file.write(table_subscriptions)

        with open("–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã.txt", "rb") as file:
            bot.send_document(callback.message.chat.id, file)

    session.close()


@bot.callback_query_handler(func=lambda callback: 'show_the_prob' in callback.data)
def callback_show_the_prob(callback):
    session = Session()

    prob_data = session.query(Classes.date, Classes.napr, Classes.coach, Classes.visitor).all()

    if prob_data:
        headers_prob = ["–î–∞—Ç–∞", "ID", "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å"]
        data_prob = [list(row) for row in prob_data]
        table_prob = tabulate(data_prob, headers_prob, tablefmt="pretty")

        with open("–ü—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è.txt", "w", encoding="utf-8") as file:
            file.write(table_prob)

        with open("–ü—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è.txt", "rb") as file:
            bot.send_document(callback.message.chat.id, file)

    session.close()


def dashboard(message):

    loading_message = bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∑–∫–∞...")

    session = Session()

    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    data_with_visitor = session.query(Classes.coach, func.count(Classes.visitor)
                                      .label('count')).filter(Classes.visitor != '-').group_by(Classes.coach).all()


    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
    coaches = [row[0] for row in data_with_visitor]
    counts_with_visitor = [row[1] for row in data_with_visitor]

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤)
    fig1, ax1 = plt.subplots()
    ax1.bar(coaches, counts_with_visitor, color='green')
    ax1.set_xlabel('–¢—Ä–µ–Ω–µ—Ä—ã')
    ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è')
    plt.title('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è')

    # –ü–æ–≤–æ—Ä–æ—Ç –∏–º–µ–Ω —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    ax1.tick_params(axis='x', rotation=0)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    image_stream1 = BytesIO()
    plt.savefig(image_stream1, format='png')
    image_stream1.seek(0)

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.close()

    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —á–∞—Å—Ç–æ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –ø–æ –¥–Ω—è–º
    data_prob = session.query(ProbClasses.date_today, func.count(ProbClasses.visitor)
                              .label('prob_count')).group_by(ProbClasses.date_today).all()


    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
    dates_prob = [row[0] for row in data_prob]
    prob_counts = [row[1] for row in data_prob]

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (—á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –ø–æ –¥–Ω—è–º)
    fig2, ax2 = plt.subplots()
    ax2.plot(dates_prob, prob_counts, color='blue', marker='x')
    ax2.set_xlabel('–î–Ω–∏')
    ax2.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π')
    plt.title('–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –ø–æ –¥–Ω—è–º')

    # –ü–æ–≤–æ—Ä–æ—Ç –¥–∞—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    ax2.tick_params(axis='x', rotation=45)

    # –ò–∑–±–µ–≥–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏—è
    plt.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    image_stream2 = BytesIO()
    plt.savefig(image_stream2, format='png')
    image_stream2.seek(0)

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.close()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    bot.send_photo(message.chat.id, photo=image_stream1)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    bot.delete_message(message.chat.id, loading_message.message_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    bot.send_photo(message.chat.id, photo=image_stream2)

    session.close()
