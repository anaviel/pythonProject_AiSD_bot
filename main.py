import telebot
import sqlite3
from datetime import datetime
from telebot import types

bot = telebot.TeleBot('6432420440:AAGQcNnopghQU9RWCRL_FwODBDUPIl9dTT8')

#–°–æ–∑–¥–∞–Ω–∏–µ –ë–î —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
database = sqlite3.connect('rasp.db', check_same_thread=False)
# –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
cursor = database.cursor()

def rasp_create():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    cursor.execute("""CREATE TABLE IF NOT EXISTS classes (
        date text,
        napr text,
        coach text,
        visitor text
    )""")


def prob_create():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏
    cursor.execute("""CREATE TABLE IF NOT EXISTS prob_classes (
        date_today text,
        date text,
        napr text,
        coach text,
        visitor text
    )""")


def insert_rasp(date, napr, coach, visitor='-'):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    cursor.execute("INSERT INTO classes (date, napr, coach, visitor) VALUES (?, ?, ?, ?)", (date, napr, coach, visitor))
    database.commit()

def update_visitor(date, napr, coach, visitor):
    # –ó–∞–º–µ–Ω–∞ 4-–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ—Å–µ—Ç–∏–ª–µ–ª—è –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ–≥–¥–∞ –æ–Ω –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è
    cursor.execute("SELECT rowid FROM classes WHERE date = ? AND napr = ? AND coach = ? AND visitor = '-'",
                   (date, napr, coach))
    row = cursor.fetchone()
    cursor.execute("UPDATE classes SET visitor = ? WHERE rowid = ?",
                   (visitor, row[0]))
    cursor.execute("SELECT * FROM classes")
    print(cursor.fetchall())
    database.commit()

def prob_classes(date, napr, coach, visitor):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    date_today = datetime.now().date()
    cursor.execute("INSERT INTO prob_classes (date_today, date, napr, coach, visitor) VALUES (?, ?, ?, ?, ?)", (date_today, date, napr, coach, visitor))
    database.commit()

def rasp_show(date):
   # –í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    cursor.execute("SELECT DISTINCT napr, coach FROM classes WHERE date = ?", (date,))
    rows = cursor.fetchall()
    rasp_list = []
    for row in rows:
        napr, coach = row
        rasp_list.append(f"ü§ç{napr}, —Ç—Ä–µ–Ω–µ—Ä: {coach}")
    return rasp_list

# –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
#cursor.execute("DELETE FROM classes")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
#cursor.execute("DROP TABLE clsses")

"""
insert_rasp('01.10.23', '–†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('01.10.23', '–†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('01.10.23', '–†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('01.10.23', '–†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('01.10.23', '–ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('01.10.23', '–ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('01.10.23', '–ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('01.10.23', '–ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('02.10.23', '–ó–¥–æ—Ä–æ–≤–∞—è —Å–ø–∏–Ω–∞', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('02.10.23', '–ó–¥–æ—Ä–æ–≤–∞—è —Å–ø–∏–Ω–∞', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('02.10.23', '–ó–¥–æ—Ä–æ–≤–∞—è —Å–ø–∏–Ω–∞', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('02.10.23', '–ó–¥–æ—Ä–æ–≤–∞—è —Å–ø–∏–Ω–∞', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('04.10.23', '–†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('04.10.23', '–†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('04.10.23', '–†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('04.10.23', '–†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
"""

#update_visitor('01.10.23', '–ô–æ–≥–∞', '–¢—Ä–µ–Ω–µ—Ä', '–ò–Ω–Ω–∞')

# –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
cursor.execute("SELECT * FROM classes")
print(cursor.fetchall())

# –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–æ–±–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏
#cursor.execute("SELECT * FROM prob_classes")
#print(cursor.fetchall())

database.commit()

name = ''

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    botton1 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è')
    markup.row(botton1)
    bot.send_message(message.chat.id, '–ë–æ—Ç –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å-—Å—Ç—É–¥–∏–∏', reply_markup=markup)
    if name == '':
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–ª–Ω—ã–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ')
        bot.register_next_step_handler(message, new_name)

@bot.message_handler(content_types=['text'])
def menu(message):

    if message.text == '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è':
        markup = types.InlineKeyboardMarkup()
        cursor.execute("SELECT DISTINCT date FROM classes")
        dates_ = cursor.fetchall()
        dates = []
        for date in dates_:
            for d in date:
                dates.append(d)
        for date in dates:
            butt = 'date:' + date
            button = types.InlineKeyboardButton(date, callback_data=butt)
            markup.add(button)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:', reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: 'date:' in callback.data)
def callback_dates_show(callback):

    markup = types.InlineKeyboardMarkup()
    date = callback.data.split(':')[1]
    rasp_list = rasp_show(date)
    rasp_str = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –Ω–∞ {date}:\n\n'
    for string in rasp_list:
        rasp_str += string
        rasp_str += '\n'
    rasp_str += '\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:'
    for i in rasp_list:
        napr = i.split(':')[0][1:].split(',')[0]
        reg = 'reg:' + date + ':' + napr
        button = types.InlineKeyboardButton(napr, callback_data=reg)
        markup.add(button)
    bot.send_message(callback.message.chat.id, rasp_str, reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: 'reg:' in callback.data)
def callback_reg(callback):
    data_parts = callback.data.split(':')
    date = data_parts[1]
    napr = data_parts[2]
    cursor.execute("SELECT coach FROM classes WHERE date = ? AND napr = ?", (date, napr))
    coach = ''.join(cursor.fetchone())
    global name
    update_visitor(date, napr, coach, name)
    bot.send_message(callback.message.chat.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {date} {napr}')

def new_name(message):
    global name
    name = message.text
    bot.send_message(message.chat.id, '–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')

bot.polling(none_stop=True)
