import telebot
from telebot import types
import os
from delete_records_daily import *

bot = telebot.TeleBot('6432420440:AAGQcNnopghQU9RWCRL_FwODBDUPIl9dTT8')

# –°–æ–∑–¥–∞–Ω–∏–µ –ë–î —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
database = sqlite3.connect('rasp.db', check_same_thread=False)
# –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
cursor = database.cursor()

def rasp_create():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    cursor.execute("""CREATE TABLE IF NOT EXISTS classes (
        date text,
        napr text,
        coach text,
        visitor text
    )""")


def prob_create():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏
    cursor.execute("""CREATE TABLE IF NOT EXISTS prob_classes (
        date_today text,
        date text,
        napr text,
        coach text,
        visitor text
    )""")


def subscription_create():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö
    cursor.execute("""CREATE TABLE IF NOT EXISTS subscription_inf (
            id text,
            visitor text,
            subscription int
        )""")


def insert_rasp(date, napr, coach, visitor='-'):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    cursor.execute("INSERT INTO classes (date, napr, coach, visitor) VALUES (?, ?, ?, ?)", (date, napr, coach, visitor))
    database.commit()


def update_visitor(date, napr, coach, visitor):
    cursor = database.cursor()
    # –ó–∞–º–µ–Ω–∞ 4-–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ—Å–µ—Ç–∏–ª–µ–ª—è –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ–≥–¥–∞ –æ–Ω –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è
    cursor.execute("SELECT rowid FROM classes WHERE date = ? AND napr = ? AND coach = ? AND visitor = '-'",
                   (date, napr, coach))
    row = cursor.fetchone()
    cursor.execute("UPDATE classes SET visitor = ? WHERE rowid = ?",
                   (visitor, row[0]))
    cursor.execute("SELECT * FROM classes")
    print(cursor.fetchall())
    database.commit()


def prob_classes(date, napr, coach, visitor):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    date_today = datetime.now().date()
    cursor.execute("INSERT INTO prob_classes (date_today, date, napr, coach, visitor) VALUES (?, ?, ?, ?, ?)",
                   (date_today, date, napr, coach, visitor))
    database.commit()


def rasp_show(date):
    cursor = database.cursor()
    # –í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    cursor.execute("SELECT DISTINCT napr, coach FROM classes WHERE date = ? AND visitor = '-'", (date,))
    rows_available = cursor.fetchall()
    cursor.execute("SELECT DISTINCT napr, coach FROM classes WHERE date = ? AND visitor != '-'", (date,))
    rows_unavailable = cursor.fetchall()
    rasp_list_available = []
    rasp_list_unavailable = []
    now = datetime.now()
    for row in rows_available:
        napr, coach = row
        print(now, f"{date} {napr[:5]}")
        if now < datetime.strptime(f"{date} {napr[:5]}", "%d-%m-%Y %H:%M"):
            rasp_list_available.append(f"ü§ç{napr}, —Ç—Ä–µ–Ω–µ—Ä: {coach}")
    for row in rows_unavailable:
        napr, coach = row
        if now < datetime.strptime(napr[:5], "%H:%M"):
            rasp_list_unavailable.append(f"ü§ç{napr}, —Ç—Ä–µ–Ω–µ—Ä: {coach} (‚ùå–ù–∞ –¥–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –º–µ—Å—Ç —É–∂–µ –Ω–µ—Ç!)")
    return rasp_list_available, rasp_list_unavailable


# –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
#cursor.execute("DELETE FROM classes")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
#cursor.execute("DROP TABLE subscription_inf")

# –¥–ª—è —Å–µ–±—è
# cursor.execute("DELETE FROM classes WHERE rowid = (SELECT MAX(rowid) FROM classes)")

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
"""
insert_rasp('01-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('01-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('01-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('01-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('01-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('01-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('01-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('01-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('01-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('01-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('01-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('01-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('01-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('01-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('01-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('02-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('02-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('02-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('02-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('02-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('02-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('02-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('02-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('02-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('02-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('02-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('02-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('02-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
"""


# –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
cursor.execute("SELECT * FROM classes")
print(cursor.fetchall())

# –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–æ–±–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏
# cursor.execute("SELECT * FROM prob_classes")
# print(cursor.fetchall())


cursor.execute("SELECT * FROM subscription_inf")
print(cursor.fetchall())


class Admin:
    def __init__(self, user_id):
        self.user_id = user_id

    # "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
    def add_rasp(self, message, date, napr, coach):
        insert_rasp(date, napr, coach)
        bot.send_message(message.chat.id,
                         f"–í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–∏–ª–∞—Å—å –∑–∞–ø–∏—Å—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n–î–∞—Ç–∞: {date}\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {napr}\n–¢—Ä–µ–Ω–µ—Ä: {coach}")

    # "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã"
    def subscription(self, message):
        subscription(message)

    # "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"
    def update_price_list(self, message):
        update_price_list(message)


class User:
    def __init__(self, user_id):
        self.user_id = user_id

    # "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
    def sign_up_for_training(self, message):
        sign_up_for_training(message)

    # "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"
    def cancel_registration_for_training(self, message):
        cancel_registration_for_training(message)

    # "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
    def personal_account(self, message):
        personal_account(message)

    # "–ü–æ–º–æ—â—å"
    def help(self, message):
        help(message)


name = ''
var = 1269188609
var2 = 961443903


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id

    if user_id == var:
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        button2 = types.KeyboardButton('–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã')
        button3 = types.KeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç')
        markup1.row(button1, button2, button3)
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!)', reply_markup=markup1)
        if name == '':
            bot.send_message(message.chat.id,
                             '–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–ª–Ω—ã–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ.')
            bot.register_next_step_handler(message, new_name)
    else:
        markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è')
        button3 = types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å')
        button5 = types.KeyboardButton('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
        button6 = types.KeyboardButton('–ü–æ–º–æ—â—å')
        markup2.row(button1, button3, button5, button6)
        bot.send_message(message.chat.id, '–ë–æ—Ç –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å-—Å—Ç—É–¥–∏–∏', reply_markup=markup2)
        if name == '':
            bot.send_message(message.chat.id,
                             '–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–ª–Ω—ã–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ.')
            bot.register_next_step_handler(message, new_name)


@bot.message_handler(content_types=['text'])
def menu(message):
    user_id = message.from_user.id
    # –µ—Å–ª–∏ –±–æ—Ç—É –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id != var:
        user = User(user_id)
        if message.text == '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è':
            user.sign_up_for_training(message)
        elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å':
            user.cancel_registration_for_training(message)
        elif message.text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
            user.personal_account(message)
        elif message.text == '–ü–æ–º–æ—â—å':
            user.help(message)
    # –µ—Å–ª–∏ –±–æ—Ç—É –Ω–∞–ø–∏—Å–∞–ª –∞–¥–º–∏–Ω
    elif user_id == var:
        admin = Admin(user_id)
        if message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–¥–¥-–º–º-–≥–≥_–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–¢—Ä–µ–Ω–µ—Ä')
            bot.register_next_step_handler(message, lambda msg: admin.add_rasp(msg, msg.text.split('_')[0],
                                                                               msg.text.split('_')[1],
                                                                               msg.text.split('_')[2]))
        elif message.text == '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã':
            admin.subscription(message)
        elif message.text == '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç':
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.')
            bot.register_next_step_handler(message, admin.update_price_list)


@bot.callback_query_handler(func=lambda callback: 'add_subscription' in callback.data)
def callback_add_subscription(callback):
    bot.send_message(callback.message.chat.id,
                     f'–í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–æ–≤–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–æ–ª–Ω—è–µ–º—ã—Ö –∑–∞–Ω—è—Ç–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n–ü—Ä–∏–º–µ—Ä: <b><i>–ò–≤–∞–Ω–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞, 30</i></b>',
                     parse_mode='HTML')
    bot.register_next_step_handler(callback.message, add_subscription, callback)


@bot.callback_query_handler(func=lambda callback: 'replenish_subscription' in callback.data)
def callback_replenish_subscription(callback):
    bot.send_message(callback.message.chat.id,
                     '–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è, –ø–æ–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n–ü—Ä–∏–º–µ—Ä: <b><i>–ò–≤–∞–Ω–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞, 30</i></b>',
                     parse_mode='HTML')
    bot.register_next_step_handler(callback.message, replenish_subscription, callback)


@bot.callback_query_handler(func=lambda callback: 'date-napr_' in callback.data)
def callback_cancel(callback):
    global name
    date_napr = callback.data.split('_')
    date = date_napr[1]
    napr = date_napr[2]
    cursor.execute("SELECT coach FROM classes WHERE date = ? AND napr = ?", (date, napr))
    coach = ''.join(cursor.fetchone())
    cursor.execute("UPDATE classes SET visitor = '-' WHERE date = ? AND napr = ? AND coach = ?",
                   (date, napr, coach))
    cursor.execute("SELECT subscription FROM subscription_inf WHERE visitor = ?",
                   (name,))
    result = cursor.fetchone()
    new_subscription = result[0] + 1
    cursor.execute("UPDATE subscription_inf SET subscription = ? WHERE visitor = ?",
                   (new_subscription, name))
    database.commit()
    bot.send_message(callback.message.chat.id,
                     f'–ó–∞–ø–∏—Å—å –Ω–∞ {date}, "{napr}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–ù–∞ –±–∞–ª–∞–Ω—Å –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ.')
    cursor.execute("SELECT * FROM classes")
    print(cursor.fetchall())


@bot.callback_query_handler(func=lambda callback: 'date:' in callback.data)
def callback_dates_show(callback):
    markup = types.InlineKeyboardMarkup()
    date = callback.data.split(':')[1]
    rasp_list_available, rasp_list_unavailable = rasp_show(date)
    if not rasp_list_available:
        bot.send_message(callback.message.chat.id, "üõèÔ∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç.")
        return
    rasp_str = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –Ω–∞ {date}:\n\n'
    for string in rasp_list_available:
        rasp_str += string
        rasp_str += '\n'
    rasp_str = rasp_str + '‚ûñ\n'
    for string in rasp_list_unavailable:
        rasp_str += string
        rasp_str += '\n'
    rasp_str += '\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:'
    for i in rasp_list_available:
        napr = i.split(',')[0][1:]
        reg = 'reg_' + date + '_' + napr
        button = types.InlineKeyboardButton(napr, callback_data=reg)
        markup.add(button)
    bot.send_message(callback.message.chat.id, rasp_str, reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: 'reg_' in callback.data)
def callback_reg(callback):
    cursor = database.cursor()
    data_parts = callback.data.split('_')
    date = data_parts[1]
    napr = data_parts[2]
    global name
    if is_user_enter(name, date, napr):
        bot.send_message(callback.message.chat.id, f'–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ {date} ({napr}).')
    else:
        cursor.execute("SELECT coach FROM classes WHERE date = ? AND napr = ?", (date, napr))
        coach = ''.join(cursor.fetchone())
        update_visitor(date, napr, coach, name)
        cursor.execute("SELECT subscription FROM subscription_inf WHERE visitor = ?", (name,))
        result = cursor.fetchone()
        new_subscription = result[0] - 1
        cursor.execute("UPDATE subscription_inf SET subscription = ? WHERE visitor = ?", (new_subscription, name))
        database.commit()
        bot.send_message(callback.message.chat.id,
                         f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã {date} –Ω–∞ {napr}.\n–° –±–∞–ª–∞–Ω—Å–∞ –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ.')


def new_name(message):
    global name
    name = message.text
    bot.send_message(message.chat.id, '–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')


def is_user_enter(name, date, napr):
    cursor = database.cursor()
    cursor.execute("SELECT * FROM classes WHERE date = ? AND napr = ? AND visitor= ?", (date, napr, name))
    result = cursor.fetchall()
    return len(result) > 0


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
def sign_up_for_training(message):
    markup = types.InlineKeyboardMarkup()
    cursor.execute("SELECT DISTINCT date FROM classes")
    dates_ = cursor.fetchall()
    dates = []
    for date in dates_:
        for d in date:
            dates.append(d)
    for date in dates:
        butt = 'date:' + date
        button = types.InlineKeyboardButton(date, callback_data=butt)
        markup.add(button)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:', reply_markup=markup)
    cursor.close()


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å"
def cancel_registration_for_training(message):
    visitor = name
    cursor.execute("SELECT date, napr FROM classes WHERE visitor = ?", (visitor,))
    markup = types.InlineKeyboardMarkup()
    dates_napr_ = cursor.fetchall()
    dates_napr = []
    for d_n in dates_napr_:
        dates_napr.append(d_n)
    for d_n in dates_napr:
        date = d_n[0]
        napr = d_n[1]
        butt = 'date-napr_' + date + '_' + napr
        name_butt = date + ' ' + napr
        button = types.InlineKeyboardButton(name_butt, callback_data=butt)
        markup.add(button)
    bot.send_message(message.chat.id, '–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å?', reply_markup=markup)


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
def personal_account(message):
    cursor.execute("SELECT subscription FROM subscription_inf WHERE visitor = ?",
                   (name,))
    result = cursor.fetchone()[0]
    cursor.execute("SELECT date, napr FROM classes WHERE visitor = ?", (name,))
    dates_napr_ = cursor.fetchall()
    dates_napr = []
    for d_n in dates_napr_:
        dates_napr.append(d_n)
    classes = ''
    for d_n in dates_napr:
        date = d_n[0]
        napr = d_n[1]
        classes = classes + '\n' + '    ' + date + '  ' + napr + '\n'
    image_file = os.listdir("images")
    if image_file:
        image_path = os.path.join("images", image_file[0])
        with open(image_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo,
                           caption=f'ü§ç–£–≤–∞–∂–∞–µ–º–∞—è, {name}!\n\n    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {result}\n\nüéÄ–ó–∞–Ω—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã:\n{classes}')


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å"
def help(message):
    bot.send_message(message.chat.id, '''–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–Ω–æ–ø–∫–∞–º–∏:
            \n\n¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª 
        –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É, –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏, –ø–æ—Å–ª–µ —á–µ–≥–æ –í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∂–µ–ª–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
        –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ, –ø—Ä–∏ —ç—Ç–æ–º —Å–æ —Å—á—ë—Ç–∞ –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ. 
            \n\n¬´–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ¬ª 
        –î–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏. –í—ã —É–≤–∏–¥–∏—Ç–µ –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã, –∏ —Å–º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –ª—é–±–æ–µ –∏–∑ –Ω–∏—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏. 
        –ü—Ä–∏ —ç—Ç–æ–º –Ω–∞ —Å—á—ë—Ç –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ.
            \n\n¬´–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç¬ª 
        –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å, –∞ —Ç–∞–∫–∂–µ –±–∞–ª–∞–Ω—Å –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞. 
        –ï—Å–ª–∏ –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ—Å–µ—Ç–∏—Ç—å —Å—Ç—É–¥–∏—é –≤–ø–µ—Ä–≤—ã–µ, —Ç–æ –¥–ª—è –í–∞—Å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ. 
            ''')


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∞–¥–º–∏–Ω–æ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"
def update_price_list(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    file_name = f"images/{file_info.file_id}.jpg"
    if os.listdir("images"):
        os.remove(os.path.join("images", os.listdir("images")[0]))
    downloaded_file = bot.download_file(file_info.file_path)
    with open(file_name, 'wb') as new_file:
        new_file.write(downloaded_file)
    bot.send_message(message.chat.id, "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∞–¥–º–∏–Ω–æ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã"
def subscription(message):
    cursor.execute("SELECT * FROM subscription_inf")
    print(cursor.fetchall())
    markup_subscription = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç', callback_data='add_subscription')
    button2 = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç', callback_data='replenish_subscription')
    markup_subscription.add(button1, button2)
    cursor.execute("SELECT visitor FROM subscription_inf WHERE subscription > 0")
    kol = len(cursor.fetchall())
    bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–Ω—Ç–æ–≤: {kol}', reply_markup=markup_subscription)


def add_subscription(message, callback):
    try:
        visitor, kol = message.text.split(', ')
        cursor.execute("INSERT INTO subscription_inf (visitor, subscription) VALUES (?, ?)", (visitor, kol))
        database.commit()
        cursor.execute("SELECT * FROM subscription_inf")
        print(cursor.fetchall())
    except:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        callback_add_subscription(callback)


def replenish_subscription(message, callback):
    try:
        visitor, kol = message.text.split(', ')
        cursor.execute("SELECT subscription FROM subscription_inf WHERE visitor = ?",
                       (visitor,))
        result = cursor.fetchone()
        if result is None:
            bot.send_message(message.chat.id, "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            new_subscription = result[0] + int(kol)
            cursor.execute("UPDATE subscription_inf SET subscription = ? WHERE visitor = ?",
                           (new_subscription, visitor))
        database.commit()
        cursor.execute("SELECT * FROM subscription_inf")
        print(cursor.fetchall())
    except:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        callback_add_subscription(callback)




bot.polling(none_stop=True)
