import telebot
from telebot import types
import os
from delete_records_daily import *

bot = telebot.TeleBot('6432420440:AAGQcNnopghQU9RWCRL_FwODBDUPIl9dTT8')

# –°–æ–∑–¥–∞–Ω–∏–µ –ë–î —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
database = sqlite3.connect('rasp.db', check_same_thread=False)
# –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
cursor = database.cursor()


def rasp_create():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    cursor.execute("""CREATE TABLE IF NOT EXISTS classes (
        date text,
        napr text,
        coach text,
        visitor text
    )""")


def prob_create():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏
    cursor.execute("""CREATE TABLE IF NOT EXISTS prob_classes (
        date_today text,
        date text,
        napr text,
        coach text,
        visitor text
    )""")


def subscription_create():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞—Ö
    cursor.execute("""CREATE TABLE IF NOT EXISTS subscription_inf (
            id text,
            phone_number text,
            visitor text,
            prob_inf text,
            subscription int
        )""")


def insert_rasp(date, napr, coach, visitor='-'):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    cursor.execute("INSERT INTO classes (date, napr, coach, visitor) VALUES (?, ?, ?, ?)", (date, napr, coach, visitor))
    database.commit()


def update_visitor(date, napr, coach, visitor):
    cursor = database.cursor()
    # –ó–∞–º–µ–Ω–∞ 4-–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ—Å–µ—Ç–∏–ª–µ–ª—è –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ–≥–¥–∞ –æ–Ω –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è
    cursor.execute("SELECT rowid FROM classes WHERE date = ? AND napr = ? AND coach = ? AND visitor = '-'",
                   (date, napr, coach))
    row = cursor.fetchone()
    cursor.execute("UPDATE classes SET visitor = ? WHERE rowid = ?",
                   (visitor, row[0]))
    cursor.execute("SELECT * FROM classes")
    print(cursor.fetchall())
    database.commit()


def prob_classes(date, napr, coach, visitor):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    date_today = datetime.now().date()
    cursor.execute("INSERT INTO prob_classes (date_today, date, napr, coach, visitor) VALUES (?, ?, ?, ?, ?)",
                   (date_today, date, napr, coach, visitor))
    database.commit()


def rasp_show(date):
    cursor = database.cursor()
    # –í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    cursor.execute("SELECT DISTINCT napr, coach FROM classes WHERE date = ? AND visitor = '-'", (date,))
    rows_available = cursor.fetchall()
    cursor.execute("SELECT DISTINCT napr, coach FROM classes WHERE date = ? AND visitor != '-'", (date,))
    rows_unavailable = cursor.fetchall()
    rasp_list_available = []
    rasp_list_unavailable = []
    now = datetime.now()
    for row in rows_available:
        napr, coach = row
        if now < datetime.strptime(f"{date} {napr[:5]}", "%d-%m-%Y %H:%M"):
            rasp_list_available.append(f"ü§ç{napr}, —Ç—Ä–µ–Ω–µ—Ä: {coach}")
    for row in rows_unavailable:
        napr, coach = row
        if now < datetime.strptime(napr[:5], "%H:%M"):
            rasp_list_unavailable.append(f"ü§ç{napr}, —Ç—Ä–µ–Ω–µ—Ä: {coach} (‚ùå–ù–∞ –¥–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –º–µ—Å—Ç —É–∂–µ –Ω–µ—Ç!)")
    return rasp_list_available, rasp_list_unavailable


# –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
# cursor.execute("DELETE FROM classes")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
# cursor.execute("DROP TABLE subscription_inf")

# –¥–ª—è —Å–µ–±—è
# cursor.execute("DELETE FROM classes WHERE rowid = (SELECT MAX(rowid) FROM classes)")

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
"""
insert_rasp('04-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('04-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('04-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('04-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('04-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('04-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('04-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('04-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('04-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('04-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('04-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('04-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('04-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('04-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('04-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('05-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('05-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('05-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('05-11-2023', '12:00 –†–∞—Å—Ç—è–∂–∫–∞', '–ò–≤–∞–Ω–æ–≤–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞')
insert_rasp('05-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('05-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('05-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('05-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('05-11-2023', '14:00 –ô–æ–≥–∞', '–°–º–∏—Ä–Ω–æ–≤–∞ –Æ–ª–∏—è –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞')
insert_rasp('05-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('05-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('05-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
insert_rasp('05-11-2023', '16:00 –ü–∏–ª–∞—Ç–µ—Å', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞')
"""

# –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
cursor.execute("SELECT * FROM classes")
print(cursor.fetchall())

# –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–æ–±–Ω—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏
# cursor.execute("SELECT * FROM prob_classes")
# print(cursor.fetchall())

# cursor.execute("UPDATE subscription_inf SET prob_inf = '+' WHERE id = 961443903")
# cursor.execute("UPDATE subscription_inf SET prob_inf = '+' WHERE id = 1269188609")
# cursor.execute("UPDATE subscription_inf SET subscription = '0' WHERE id = 1269188609")
cursor.execute("SELECT * FROM subscription_inf")
print(cursor.fetchall())

database.commit()


# –∫–ª–∞—Å—Å –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
class Admin:
    _admin_id_1: int = 1269188609
    _admin_id_2: int = 9614439031
    admin_used: int

    def __init__(self, user_id):
        if (user_id == self._admin_id_1) or (user_id == self._admin_id_2):
            self.admin_used = user_id
        else:
            self.admin_used = 0

    # "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
    def add_rasp(self, message, date, napr, coach):
        insert_rasp(date, napr, coach)
        bot.send_message(message.chat.id,
                         f"–í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–∏–ª–∞—Å—å –∑–∞–ø–∏—Å—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"
                         f"–î–∞—Ç–∞: {date}\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {napr}\n–¢—Ä–µ–Ω–µ—Ä: {coach}")

    # "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    def edit_rasp(self, message):
        edit_rasp(message)

    # "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã"
    def subscription(self, message):
        subscription(message)

    # "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"
    def update_price_list(self, message):
        update_price_list(message)

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
    def keyboard_admin(self, message):
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        button2 = types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        button3 = types.KeyboardButton('–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã')
        button4 = types.KeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç')
        markup1.row(button1, button2)
        markup1.row(button3, button4)
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=markup1)


# –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å–µ—â–∞—é—Ç —Å—Ç—É–¥–∏—é
class User:
    user_id: int

    def __init__(self, user_id):
        self.user_id = user_id

    # "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
    def sign_up_for_training(self, message):
        sign_up_for_training(message)

    # "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"
    def cancel_registration_for_training(self, message):
        cancel_registration_for_training(message)

    # "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
    def personal_account(self, message):
        personal_account(message)

    # "–ü–æ–º–æ—â—å"
    def help(self, message):
        help(message)

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def keyboard_user(self, message):
        markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è')
        button2 = types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å')
        button3 = types.KeyboardButton('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
        button4 = types.KeyboardButton('–ü–æ–º–æ—â—å')
        markup2.row(button1, button2)
        markup2.row(button3, button4)
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ñ–∏—Ç–Ω–µ—Å-—Å—Ç—É–¥–∏–∏.', reply_markup=markup2)


# –∫–ª–∞—Å—Å –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –ø—Ä–∏–¥—É—Ç –≤ —Å—Ç—É–¥–∏—é
class NewUser:
    new_user_id: int

    def __init__(self, user_id):
        self.new_user_id = user_id

    # "–û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ"
    # def ...(self, message):
    #    ...

    # "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
    # def personal_account(self, message):
    #    personal_account(message)

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # def keyboard_new_user(self, message):
    #    ...

    def keyboard_new_user(self, message):
        markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ')
        button2 = types.KeyboardButton('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
        button3 = types.KeyboardButton('–ü–æ–º–æ—â—å')
        markup2.row(button1)
        markup2.row(button2, button3)
        bot.send_message(message.chat.id, '–ë–æ—Ç –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å-—Å—Ç—É–¥–∏–∏', reply_markup=markup2)


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    admin = Admin(user_id)
    # –µ—Å–ª–∏ –±–æ—Ç—É –Ω–∞–ø–∏—Å–∞–ª –æ–¥–∏–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤
    if admin.admin_used == user_id:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–µ–≥–æ
        admin.keyboard_admin(message)
    # –µ—Å–ª–∏ –±–æ—Ç—É –Ω–∞–ø–∏—Å–∞–ª –Ω–µ –∞–¥–º–∏–Ω, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    elif admin.admin_used == 0:
        authorization(message)


@bot.message_handler(content_types=['text'])
def menu(message):
    user_id = message.from_user.id
    admin = Admin(user_id)
    # –µ—Å–ª–∏ –±–æ—Ç—É –Ω–∞–ø–∏—Å–∞–ª –∞–¥–º–∏–Ω
    if admin.admin_used == user_id:
        if message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–¥–¥-–º–º-–≥–≥–≥–≥_–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–¢—Ä–µ–Ω–µ—Ä')
            bot.register_next_step_handler(message, lambda msg: admin.add_rasp(msg, msg.text.split('_')[0],
                                                                               msg.text.split('_')[1],
                                                                               msg.text.split('_')[2]))
        elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            admin.edit_rasp(message)
        elif message.text == '–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã':
            admin.subscription(message)
        elif message.text == '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç':
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.')
            bot.register_next_step_handler(message, admin.update_price_list)
    # –µ—Å–ª–∏ –±–æ—Ç—É –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    else:
        user = User(user_id)
        if message.text == '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è':
            user.sign_up_for_training(message)
        elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å':
            user.cancel_registration_for_training(message)
        elif message.text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
            user.personal_account(message)
        elif message.text == '–ü–æ–º–æ—â—å':
            user.help(message)


def authorization(message):
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –Ω–∞—à–µ–π —Ñ–∏—Ç–Ω–µ—Å-—Å—Ç—É–¥–∏–∏. '
                                      '–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã? (–î–∞/–ù–µ—Ç)')
    bot.register_next_step_handler(message, check_visitor)


def check_visitor(message):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.text.lower() == '–Ω–µ—Ç':
        bot.send_message(message.chat.id, '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, '
                                          '–∞ —Ç–∞–∫–∂–µ –í–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n  '
                                          '+7YYYXXXXXXX –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ')
        bot.register_next_step_handler(message, add_subscript)
    if message.text.lower() == '–¥–∞':
        bot.send_message(message.chat.id, '–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ '
                                          '–≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n  +7YYYXXXXXXX')
        bot.register_next_step_handler(message, check_number)


def add_subscript(message):
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞–º–∏ –∑–∞–ø–∏—Å—å –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = message.from_user.id
    phone_number = message.text.split(' ')[0]
    visitor_name = ' '.join(message.text.split(' ')[1:])
    prob_inf = '-'
    subscription_ = 0
    cursor.execute("INSERT INTO subscription_inf "
                   "(id, phone_number, visitor, prob_inf, subscription) VALUES (?, ?, ?, ?, ?)",
                   (user_id, phone_number, visitor_name, prob_inf, subscription_))
    database.commit()
    new_user = NewUser(user_id)
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–≤–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user.keyboard_new_user(message)


def check_number(message):
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É
    user_id = message.from_user.id
    phone_number = message.text
    cursor.execute("SELECT visitor FROM subscription_inf WHERE phone_number = ?", (phone_number,))
    name_visitor = ''.join(cursor.fetchone())
    if name_visitor:
        cursor.execute("SELECT id FROM subscription_inf WHERE visitor = ? AND phone_number = ?",
                       (name_visitor, phone_number))
        if ''.join(cursor.fetchone()) != user_id:
            cursor.execute("UPDATE subscription_inf SET id = ? WHERE visitor = ? AND phone_number = ?",
                           (user_id, name_visitor, phone_number))
        bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name_visitor}! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å.')
        cursor.execute("SELECT prob_inf FROM subscription_inf WHERE id = ?",
                       (user_id,))
        if ''.join(cursor.fetchone()) == '+':
            user = User(user_id)
            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.keyboard_user(message)
        else:
            new_user = NewUser(user_id)
            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user.keyboard_new_user(message)
    else:
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö'
                                          '–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.')
        start()


@bot.callback_query_handler(func=lambda callback: 'replenish_subscription' in callback.data)
def callback_replenish_subscription(callback):
    bot.send_message(callback.message.chat.id,
                     '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –§–ò–û –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è, –ø–æ–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                     '–ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n'
                     '–ü—Ä–∏–º–µ—Ä: <b><i>+79213421431, –ò–≤–∞–Ω–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞, 30</i></b>',
                     parse_mode='HTML')
    bot.register_next_step_handler(callback.message, replenish_subscription, callback)


@bot.callback_query_handler(func=lambda callback: 'delete_a_training' in callback.data)
def callback_delete_a_training(callback):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞—Ç –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞–Ω—è—Ç–∏–π
    cursor.execute("SELECT date, napr FROM classes")
    data = cursor.fetchall()
    # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç
    dates = []
    for row in data:
        if row[0] not in dates:
            dates.append(row[0])
    # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏
    keyboard = types.InlineKeyboardMarkup()
    for date in dates:
        button = types.InlineKeyboardButton(text=date, callback_data='delete_class_date_' + date)
        keyboard.add(button)

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
    bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ:",
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda callback: 'delete_class_date_' in callback.data)
def callback_delete_class_date(callback):
    date = callback.data.split('_')[3]
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    cursor.execute("SELECT napr FROM classes WHERE date=?", (date,))
    data = cursor.fetchall()

    # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
    keyboard = types.InlineKeyboardMarkup()
    buttons = []
    for row in data:
        if row[0] not in buttons:
            buttons.append(row[0])
            button = types.InlineKeyboardButton(text=row[0], callback_data='delete_class_napr_' + date + '_' + row[0])
            keyboard.add(button)

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    bot.send_message(callback.message.chat.id, "–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda callback: 'delete_class_napr_' in callback.data)
def callback_delete_class_napr(callback):
    data = callback.data.split('_')
    date = data[3]
    napr = data[4]
    # —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
    cursor.execute("DELETE FROM classes WHERE date=? AND napr=?", (date, napr))
    database.commit()
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    bot.send_message(callback.message.chat.id, f'–ó–∞–Ω—è—Ç–∏–µ –Ω–∞ {date} –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {napr} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.')


@bot.callback_query_handler(func=lambda callback: 'replace_a_training' in callback.data)
def callback_replace_a_training(callback):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞—Ç –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞–Ω—è—Ç–∏–π
    cursor.execute("SELECT date, napr FROM classes")
    data = cursor.fetchall()
    # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç
    dates = []
    for row in data:
        if row[0] not in dates:
            dates.append(row[0])
    # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏
    keyboard = types.InlineKeyboardMarkup()
    for date in dates:
        button = types.InlineKeyboardButton(text=date, callback_data='replace_class_date_' + date)
        keyboard.add(button)

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
    bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ:",
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda callback: 'replace_class_date_' in callback.data)
def callback_replace_class_date(callback):
    date = callback.data.split('_')[3]
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    cursor.execute("SELECT napr FROM classes WHERE date=?", (date,))
    data = cursor.fetchall()

    # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
    keyboard = types.InlineKeyboardMarkup()
    buttons = []
    for row in data:
        if row[0] not in buttons:
            buttons.append(row[0])
            button = types.InlineKeyboardButton(text=row[0], callback_data='replace_class_napr_' + date + '_' + row[0])
            keyboard.add(button)

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    bot.send_message(callback.message.chat.id, "–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda callback: 'replace_class_napr_' in callback.data)
def callback_replace_class_napr(callback):
    data, napr = callback.data.split('_')[3:]
    cursor.execute("SELECT * FROM classes WHERE date=? AND napr=?", (data, napr))
    rows = cursor.fetchall()
    print(rows)
    if len(rows) == 0:
        bot.send_message(callback.message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        return
    bot.send_message(callback.message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–¥-–º–º-–≥–≥–≥–≥_–Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–Ω–æ–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä'")
    bot.register_next_step_handler(callback.message, replace_classes, rows, data, napr)


@bot.callback_query_handler(func=lambda callback: 'date-napr_' in callback.data)
def callback_cancel(callback):
    user_id = callback.from_user.id
    cursor.execute("SELECT visitor FROM subscription_inf WHERE id = ?", (user_id,))
    name = ''.join(cursor.fetchone())
    date_napr = callback.data.split('_')
    date = date_napr[1]
    napr = date_napr[2]
    cursor.execute("SELECT coach FROM classes WHERE date = ? AND napr = ?", (date, napr))
    coach = ''.join(cursor.fetchone())
    cursor.execute("UPDATE classes SET visitor = '-' WHERE date = ? AND napr = ? AND coach = ?",
                   (date, napr, coach))
    cursor.execute("SELECT subscription FROM subscription_inf WHERE visitor = ?",
                   (name,))
    result = cursor.fetchone()
    new_subscription = result[0] + 1
    cursor.execute("UPDATE subscription_inf SET subscription = ? WHERE visitor = ?",
                   (new_subscription, name))
    database.commit()
    bot.send_message(callback.message.chat.id,
                     f'–ó–∞–ø–∏—Å—å –Ω–∞ {date}, "{napr}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.'
                     f'\n–ù–∞ –±–∞–ª–∞–Ω—Å –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ.')
    cursor.execute("SELECT * FROM classes")
    print(cursor.fetchall())


@bot.callback_query_handler(func=lambda callback: 'date:' in callback.data)
def callback_dates_show(callback):
    markup = types.InlineKeyboardMarkup()
    date = callback.data.split(':')[1]
    rasp_list_available, rasp_list_unavailable = rasp_show(date)
    if not rasp_list_available:
        bot.send_message(callback.message.chat.id, "üõèÔ∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç.")
        return
    rasp_str = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –Ω–∞ {date}:\n\n'
    for string in rasp_list_available:
        rasp_str += string
        rasp_str += '\n'
    rasp_str = rasp_str + '‚ûñ\n'
    for string in rasp_list_unavailable:
        rasp_str += string
        rasp_str += '\n'
    rasp_str += '\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:'
    for i in rasp_list_available:
        napr = i.split(',')[0][1:]
        reg = 'reg_' + date + '_' + napr
        button = types.InlineKeyboardButton(napr, callback_data=reg)
        markup.add(button)
    bot.send_message(callback.message.chat.id, rasp_str, reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: 'reg_' in callback.data)
def callback_reg(callback):
    cursor = database.cursor()
    user_id = callback.from_user.id
    cursor.execute("SELECT visitor FROM subscription_inf WHERE id = ?", (user_id,))
    name = ''.join(cursor.fetchone())
    data_parts = callback.data.split('_')
    date = data_parts[1]
    napr = data_parts[2]
    if is_user_enter(name, date, napr):
        bot.send_message(callback.message.chat.id, f'–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ {date} ({napr}).')
    else:
        cursor.execute("SELECT coach FROM classes WHERE date = ? AND napr = ?", (date, napr))
        coach = ''.join(cursor.fetchone())
        update_visitor(date, napr, coach, name)
        cursor.execute("SELECT subscription FROM subscription_inf WHERE visitor = ?", (name,))
        result = cursor.fetchone()
        new_subscription = result[0] - 1
        cursor.execute("UPDATE subscription_inf SET subscription = ? WHERE visitor = ?", (new_subscription, name))
        database.commit()
        bot.send_message(callback.message.chat.id,
                         f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã {date} –Ω–∞ {napr}.\n–° –±–∞–ª–∞–Ω—Å–∞ –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ.')


def is_user_enter(name, date, napr):
    cursor = database.cursor()
    cursor.execute("SELECT * FROM classes WHERE date = ? AND napr = ? AND visitor= ?", (date, napr, name))
    result = cursor.fetchall()
    cursor.close()
    return len(result) > 0


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
def sign_up_for_training(message):
    cursor = database.cursor()
    user_id = message.from_user.id
    cursor.execute("SELECT subscription FROM subscription_inf WHERE id = ?", (user_id,))
    sub = cursor.fetchone()
    if sub:
        if sub[0] > 0:
            markup = types.InlineKeyboardMarkup()
            cursor.execute("SELECT DISTINCT date FROM classes")
            dates_ = cursor.fetchall()
            dates = []
            for date in dates_:
                for d in date:
                    dates.append(d)
            for date in dates:
                butt = 'date:' + date
                button = types.InlineKeyboardButton(date, callback_data=butt)
                markup.add(button)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:', reply_markup=markup)
            cursor.close()
        else:
            bot.send_message(message.chat.id,
                             "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç.\n"
                             "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ —Å—Ç—É–¥–∏–∏ –¥–ª—è –µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ.")


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å"
def cancel_registration_for_training(message):
    user_id = message.from_user.id
    cursor.execute("SELECT visitor FROM subscription_inf WHERE id = ?", (user_id,))
    visitor = ''.join(cursor.fetchone())
    cursor.execute("SELECT date, napr FROM classes WHERE visitor = ?", (visitor,))
    markup = types.InlineKeyboardMarkup()
    dates_napr_ = cursor.fetchall()
    dates_napr = []
    for d_n in dates_napr_:
        dates_napr.append(d_n)
    for d_n in dates_napr:
        date = d_n[0]
        napr = d_n[1]
        butt = 'date-napr_' + date + '_' + napr
        name_butt = date + ' ' + napr
        button = types.InlineKeyboardButton(name_butt, callback_data=butt)
        markup.add(button)
    bot.send_message(message.chat.id, '–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å?', reply_markup=markup)


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
def personal_account(message):
    cursor = database.cursor()
    user_id = message.from_user.id
    cursor.execute("SELECT visitor FROM subscription_inf WHERE id = ?", (user_id,))
    name = ''.join(cursor.fetchone())
    cursor.execute("SELECT subscription FROM subscription_inf WHERE visitor = ?",
                   (name,))
    result = cursor.fetchone()[0]
    cursor.execute("SELECT date, napr FROM classes WHERE visitor = ?", (name,))
    dates_napr_ = cursor.fetchall()
    dates_napr = []
    for d_n in dates_napr_:
        dates_napr.append(d_n)
    classes = ''
    for d_n in dates_napr:
        date = d_n[0]
        napr = d_n[1]
        classes = classes + '\n' + '    ' + date + '  ' + napr + '\n'
    image_file = os.listdir("images")
    if image_file:
        image_path = os.path.join("images", image_file[0])
        with open(image_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo,
                           caption=f'ü§ç–£–≤–∞–∂–∞–µ–º–∞—è, {name}!\n\n    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: {result}\n\nüéÄ–ó–∞–Ω—è—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã:\n{classes}')
    cursor.close()


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å"
def help(message):
    bot.send_message(message.chat.id, '''–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–Ω–æ–ø–∫–∞–º–∏:
            \n\nü§ç¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ªü§ç 
        –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É, –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏, –ø–æ—Å–ª–µ —á–µ–≥–æ –í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∂–µ–ª–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
        –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ, –ø—Ä–∏ —ç—Ç–æ–º —Å–æ —Å—á—ë—Ç–∞ –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ. 
            \n\nü§ç¬´–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ¬ªü§ç 
        –î–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏. –í—ã —É–≤–∏–¥–∏—Ç–µ –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã, –∏ —Å–º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –ª—é–±–æ–µ –∏–∑ –Ω–∏—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏. 
        –ü—Ä–∏ —ç—Ç–æ–º –Ω–∞ —Å—á—ë—Ç –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ.
            \n\nü§ç¬´–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç¬ªü§ç 
        –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å, –∞ —Ç–∞–∫–∂–µ –±–∞–ª–∞–Ω—Å –í–∞—à–µ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞. 
        –ï—Å–ª–∏ –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ—Å–µ—Ç–∏—Ç—å —Å—Ç—É–¥–∏—é –≤–ø–µ—Ä–≤—ã–µ, —Ç–æ –¥–ª—è –í–∞—Å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ. 
            ''')


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∞–¥–º–∏–Ω–æ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"
def update_price_list(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    file_name = f"images/{file_info.file_id}.jpg"
    if os.listdir("images"):
        os.remove(os.path.join("images", os.listdir("images")[0]))
    downloaded_file = bot.download_file(file_info.file_path)
    with open(file_name, 'wb') as new_file:
        new_file.write(downloaded_file)
    bot.send_message(message.chat.id, "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∞–¥–º–∏–Ω–æ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã"
def subscription(message):
    cursor.execute("SELECT * FROM subscription_inf")
    print(cursor.fetchall())
    markup_subscription = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç', callback_data='replenish_subscription')
    markup_subscription.add(button1)
    cursor.execute("SELECT visitor FROM subscription_inf WHERE subscription > 0")
    kol = len(cursor.fetchall())
    bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {kol}', reply_markup=markup_subscription)


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∞–¥–º–∏–Ω–æ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
def edit_rasp(message):
    cursor.execute("SELECT * FROM classes")
    print(cursor.fetchall())
    markup_edit_rasp = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ', callback_data='delete_a_training')
    button2 = types.InlineKeyboardButton('–ó–∞–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ', callback_data='replace_a_training')
    markup_edit_rasp.add(button1, button2)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup_edit_rasp)


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –∑–∞–Ω—è—Ç–∏—è –∞–¥–º–∏–Ω–æ–º
def replace_classes(message, rows, data, napr):
    new_data, new_napr, new_coach = message.text.split('_')
    for row in rows:
        cursor.execute("UPDATE classes SET date=?, napr=?, coach=? WHERE date=? AND napr=?",
                       (new_data, new_napr, new_coach, data, napr))
    database.commit()
    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")


def replenish_subscription(message, callback):
    try:
        phone_number, visitor, kol = message.text.split(', ')
        cursor.execute("SELECT subscription FROM subscription_inf WHERE phone_number = ? AND visitor = ?",
                       (phone_number, visitor))
        result = cursor.fetchone()
        if result is None:
            bot.send_message(message.chat.id, "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            new_subscription = result[0] + int(kol)
            cursor.execute("UPDATE subscription_inf SET subscription = ? WHERE visitor = ?",
                           (new_subscription, visitor))
            bot.send_message(message.chat.id, "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω.")
        database.commit()
        cursor.execute("SELECT * FROM subscription_inf")
        print(cursor.fetchall())
    except:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        callback_replenish_subscription(callback)


def delete_a_training(message, callback):
    ...


def replace_a_training(message, callback):
    ...


bot.polling(none_stop=True)
